//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace winuake.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("winuake.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///
        ///
        ///if &quot;%ALIASES%&quot; == &quot;&quot; (
        ///  set ALIASES=&quot;%CMDER_ROOT%\config\user_aliases.cmd&quot;
        ///)
        ///
        ///setlocal enabledelayedexpansion
        ///
        ///if &quot;%~1&quot; == &quot;&quot; echo Use /? for help &amp; echo. &amp; goto :p_show
        ///
        ///:: check command usage
        ///
        ///rem #region parseargument
        ///goto parseargument
        ///
        ///:do_shift
        ///  shift
        ///
        ///:parseargument
        ///  set currentarg=%~1
        ///
        ///  if /i &quot;%currentarg%&quot; equ &quot;/f&quot; (
        ///    set ALIASES=%~2
        ///    set _f=%~2
        ///    shift
        ///    goto :do_shift
        ///  ) else if /i &quot;%currentarg%&quot; == &quot;/reload&quot; (
        ///    goto :p_reload
        ///  ) else if [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string alias {
            get {
                return ResourceManager.GetString("alias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///setlocal
        ///
        ///if &quot;%~1&quot; equ &quot;&quot; goto :wrongSyntax
        ///
        ///if not defined CMDER_USER_FLAGS (
        ///  :: in case nothing was passed to %CMDER_USER_FLAGS%
        ///  set &quot;CMDER_USER_FLAGS= &quot;
        ///)
        ///
        ///set &quot;feNot=false&quot;
        ///goto :parseArgument
        ///
        ///:doShift
        ///  shift
        ///
        ///:parseArgument
        ///set &quot;currenArgu=%~1&quot;
        ///if /i &quot;%currenArgu%&quot; equ &quot;/setPath&quot; (
        ///  :: set %flag_exists% shortcut
        ///  endlocal
        ///  set &quot;ccall=call %~dp0cexec.cmd&quot;
        ///  set &quot;cexec=%~dp0cexec.cmd&quot;
        ///) else if /i &quot;%currenArgu%&quot; == &quot;/?&quot; (
        ///  goto :help
        ///) else if /i &quot;%currenArgu% [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cexec {
            get {
                return ResourceManager.GetString("cexec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] CHANGES {
            get {
                object obj = ResourceManager.GetObject("CHANGES", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to :: Copyright (c) 2012 Martin Ridgers
        ///::
        ///:: Permission is hereby granted, free of charge, to any person obtaining a copy
        ///:: of this software and associated documentation files (the &quot;Software&quot;), to deal
        ///:: in the Software without restriction, including without limitation the rights
        ///:: to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        ///:: copies of the Software, and to permit persons to whom the Software is
        ///:: furnished to do so, subject to the following conditions:
        ///::
        ///:: The ab [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string clink {
            get {
                return ResourceManager.GetString("clink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clink_dll_x64 {
            get {
                object obj = ResourceManager.GetObject("clink_dll_x64", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clink_dll_x86 {
            get {
                object obj = ResourceManager.GetObject("clink_dll_x86", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clink_inputrc_base {
            get {
                object obj = ResourceManager.GetObject("clink_inputrc_base", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clink_x64 {
            get {
                object obj = ResourceManager.GetObject("clink_x64", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clink_x86 {
            get {
                object obj = ResourceManager.GetObject("clink_x86", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;html&gt;
        ///&lt;meta charset=&quot;utf-8&quot;/&gt;
        ///
        ///&lt;!-- ----------------------------------------------------- --&gt;
        ///&lt;head&gt;
        ///&lt;style&gt;
        ///body {
        ///    padding-top: 3em;
        ///    width: 640px;
        ///    margin: 0 auto;
        ///}
        ///
        ///h3 {
        ///    width: 100%;
        ///    border-bottom: 1px black solid;
        ///}
        ///
        ///h3 { font-size: 1.21em; }
        ///h4 { font-size: 1.14em; }
        ///h5 { font-size: 1.07em; }
        ///h6 { font-size: 1.00em; }
        ///
        ///.section {
        ///    margin-top: 2em;
        ///    margin-bottom: 4em;
        ///}
        ///
        ///#header {
        ///    float: right;
        ///    text-align: right;
        ///}
        ///
        ///#header #title {
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string clink1 {
            get {
                return ResourceManager.GetString("clink1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clink2 {
            get {
                object obj = ResourceManager.GetObject("clink2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cmder {
            get {
                object obj = ResourceManager.GetObject("Cmder", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///
        ///echo ------------------------------------
        ///echo dir &quot;%cmder_root%&quot;
        ///echo ------------------------------------
        ///dir &quot;%cmder_root%&quot;
        ///
        ///echo.
        ///echo ------------------------------------
        ///echo dir &quot;%cmder_root%\vendor&quot;
        ///echo ------------------------------------
        ///dir &quot;%cmder_root%\vendor&quot;
        ///
        ///echo.
        ///echo ------------------------------------
        ///echo dir /s &quot;%cmder_root%\bin&quot;
        ///echo ------------------------------------
        ///dir /s &quot;%cmder_root%\bin&quot;
        ///
        ///echo.
        ///echo ------------------------------------
        ///echo dir [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string cmder_diag {
            get {
                return ResourceManager.GetString("cmder_diag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] cmder_diag1 {
            get {
                object obj = ResourceManager.GetObject("cmder_diag1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] cmder_diag2 {
            get {
                object obj = ResourceManager.GetObject("cmder_diag2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cmder1 {
            get {
                object obj = ResourceManager.GetObject("Cmder1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Cmder3 {
            get {
                object obj = ResourceManager.GetObject("Cmder3", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] LICENSE {
            get {
                object obj = ResourceManager.GetObject("LICENSE", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] LICENSE1 {
            get {
                object obj = ResourceManager.GetObject("LICENSE1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Readme {
            get {
                object obj = ResourceManager.GetObject("Readme", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] settings {
            get {
                object obj = ResourceManager.GetObject("settings", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///
        ///set start=%~1
        ///set end=%~2
        ///
        ///set options=&quot;tokens=1-4 delims=:.,&quot;
        ///for /f %options% %%a in (&quot;%start%&quot;) do set start_h=%%a&amp;set /a start_m=100%%b %% 100&amp;set /a start_s=100%%c %% 100&amp;set /a start_ms=100%%d %% 100
        ///for /f %options% %%a in (&quot;%end%&quot;) do set end_h=%%a&amp;set /a end_m=100%%b %% 100&amp;set /a end_s=100%%c %% 100&amp;set /a end_ms=100%%d %% 100
        ///
        ///set /a hours=%end_h%-%start_h%
        ///set /a mins=%end_m%-%start_m%
        ///set /a secs=%end_s%-%start_s%
        ///set /a ms=%end_ms%-%start_ms%
        ///if %ms% lss 0 set /a secs = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string timer {
            get {
                return ResourceManager.GetString("timer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ;= @echo off
        ///;= rem Call DOSKEY and use this file as the macrofile
        ///;= %SystemRoot%\system32\doskey /listsize=1000 /macrofile=%0%
        ///;= rem In batch mode, jump to the end of the file
        ///;= goto:eof
        ///;= Add aliases below here
        ///e.=explorer .
        ///gl=git log --oneline --all --graph --decorate  $*
        ///ls=ls --show-control-chars -F --color $*
        ///pwd=cd
        ///clear=cls
        ///history=cat -n &quot;%CMDER_ROOT%\config\.history&quot;
        ///unalias=alias /d $1
        ///vi=vim $*
        ///cmderr=cd /d &quot;%CMDER_ROOT%&quot;
        ///.
        /// </summary>
        internal static string user_aliases {
            get {
                return ResourceManager.GetString("user_aliases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to :: use this file to run your own startup commands
        ///:: use in front of the command to prevent printing the command
        ///
        ///:: uncomment this to have the ssh agent load when cmder starts
        ///:: call &quot;%GIT_INSTALL_ROOT%/cmd/start-ssh-agent.cmd&quot; /k exit
        ///
        ///:: uncomment the next two lines to use pageant as the ssh authentication agent
        ///:: SET SSH_AUTH_SOCK=/tmp/.ssh-pageant-auth-sock
        ///:: call &quot;%GIT_INSTALL_ROOT%/cmd/start-ssh-pageant.cmd&quot;
        ///
        ///:: you can add your plugins to the cmder path like so
        ///:: set &quot;PATH=%CMDER_ROOT%\vendor\wh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string user_profile {
            get {
                return ResourceManager.GetString("user_profile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Version_1_3_14 {
            get {
                object obj = ResourceManager.GetObject("Version_1_3_14", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to @echo off
        ///IF [%1] == [] (
        ///    REM -- manually opened console (Ctrl + Shift + `) --
        ///    CALL &quot;%~dp0..\init.bat&quot;
        ///) ELSE (
        ///    REM -- task --
        ///    CALL cmd %*
        ///    exit
        ///)
        ///.
        /// </summary>
        internal static string vscode_init {
            get {
                return ResourceManager.GetString("vscode_init", resourceCulture);
            }
        }
    }
}
